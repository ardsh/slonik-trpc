"use strict";(self.webpackChunkslonik_trpc_docs=self.webpackChunkslonik_trpc_docs||[]).push([[233],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,f=d["".concat(o,".").concat(m)]||d[m]||c[m]||r;return n?a.createElement(f,l(l({ref:t},u),{},{components:n})):a.createElement(f,l({ref:t},u))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[d]="string"==typeof e?e:i,l[1]=s;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1101:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:7},l="Filtering",s={unversionedId:"usage-main-features/filtering",id:"usage-main-features/filtering",title:"Filtering",description:"When building views, you have the possibility to declare filters.",source:"@site/docs/usage-main-features/filtering.md",sourceDirName:"usage-main-features",slug:"/usage-main-features/filtering",permalink:"/slonik-trpc/docs/usage-main-features/filtering",draft:!1,editUrl:"https://github.com/ardsh/slonik-trpc/tree/main/docs/docs/usage-main-features/filtering.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Usage with tRPC",permalink:"/slonik-trpc/docs/usage-main-features/trpc"},next:{title:"Authorization",permalink:"/slonik-trpc/docs/usage-main-features/authorization"}},o={},p=[{value:"Contained in array filter",id:"contained-in-array-filter",level:2},{value:"String comparisons filter",id:"string-comparisons-filter",level:2},{value:"Comparison filters",id:"comparison-filters",level:3},{value:"Boolean filters",id:"boolean-filters",level:3},{value:"JSON filters",id:"json-filters",level:3},{value:"Generic filters",id:"generic-filters",level:2},{value:"Merging filters",id:"merging-filters",level:2},{value:"Usage with tRPC",id:"usage-with-trpc",level:2}],u={toc:p};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"filtering"},"Filtering"),(0,i.kt)("p",null,"When building views, you have the possibility to declare filters."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"buildView")," function includes several easy-to-add filter types."),(0,i.kt)("h2",{id:"contained-in-array-filter"},"Contained in array filter"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const userView = buildView`FROM users`\n    .addInArrayFilter('id', sql.fragment`users.id`, 'numeric')\n")),(0,i.kt)("p",null,"This is a simple way to add a filter that accepts both an array, and a single value, of a specific field. The 2nd argument specifies the column we want to compare against (and it can be any kind of SQL fragment, e.g. a ",(0,i.kt)("inlineCode",{parentName:"p"},"COALESCE")," function call, not just a single column)."),(0,i.kt)("p",null,"The above allows you to filter with the ",(0,i.kt)("inlineCode",{parentName:"p"},"where")," API like below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"where: {\n    OR: [{\n        id: [3, 4, 5]\n    }, {\n        NOT: {\n            id: 6\n        }\n    }]\n}\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"OR"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"AND"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"NOT")," filters are added automatically, but they can be removed."),(0,i.kt)("p",null,"This will produce an SQL condition like the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"WHERE users.id = ANY([3,4,5]::numeric[])\nOR (\n  NOT(\n    users.id = ANY([6]::numeric[])\n  )\n)\n")),(0,i.kt)("h2",{id:"string-comparisons-filter"},"String comparisons filter"),(0,i.kt)("p",null,"If you don't need to specify complex columns with SQL fragments, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"tableName.column")," to more easily create multiple filters. For string comparisons specifically, you'll be able to use filters like ",(0,i.kt)("inlineCode",{parentName:"p"},"_ilike"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"_iregex")," etc."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"userView.addStringFilter(['users.name', 'users.profession'])\n")),(0,i.kt)("p",null,"This allows both the ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"profession")," columns to be filterable with string operators."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"where: {\n    \"users.name\": {\n        _ilike: 'John',\n    },\n    \"users.profession\": {\n        _iregex: 'programmer',\n    },\n}\n")),(0,i.kt)("h3",{id:"comparison-filters"},"Comparison filters"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"userView.addComparisonFilter('postsCount', sql.fragment`(\n    SELECT COUNT(*) FROM posts\n    WHERE posts.author_id = users.id\n)`)\n")),(0,i.kt)("p",null,"This allows you to filter by the number of posts a user has. The above will allow you to filter with the ",(0,i.kt)("inlineCode",{parentName:"p"},"where")," API like below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"where: {\n    postsCount: {\n        _gte: 5,\n    },\n}\n")),(0,i.kt)("p",null,"In actuality you'll want to avoid complex SQL fragments like the above, for performance reasons, and instead use a view that already has the ",(0,i.kt)("inlineCode",{parentName:"p"},"postsCount")," column, but this is just an example."),(0,i.kt)("h3",{id:"boolean-filters"},"Boolean filters"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"addBooleanFilter")," utility takes in a fragment and applies it if the input is true. It applies the inverse of the condition if the input is ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),", and doesn't apply the filter at all if the input is ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"userView.addBooleanFilter('isGmail', sql.fragment`users.email ILIKE '%gmail.com'`)\n")),(0,i.kt)("p",null,"To use the filter, you can pass an ",(0,i.kt)("inlineCode",{parentName:"p"},"isGmail")," value to the ",(0,i.kt)("inlineCode",{parentName:"p"},"where")," object:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"where: {\n    isGmail: false,\n}\n")),(0,i.kt)("p",null,"This will return only users that don't have their email ending in gmail.com, because we specified ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("p",null,"The equivalent SQL would be"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"WHERE NOT(email ILIKE '%gmail.com')\n")),(0,i.kt)("h3",{id:"json-filters"},"JSON filters"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"addJsonContainsFilter")," utility is designed to filter records based on the contents of a JSONB column in your database. It uses ",(0,i.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/functions-json.html#FUNCTIONS-JSON-PROCESSING"},"PostgreSQL's ",(0,i.kt)("inlineCode",{parentName:"a"},"@>")," operator")," to check if the JSONB column contains a specific structure or value."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// Adding the JSON contains filter\nview.addJsonContainsFilter('settings');\n")),(0,i.kt)("p",null,"In this example, ",(0,i.kt)("inlineCode",{parentName:"p"},"addJsonContainsFilter")," is set up to filter based on the 'settings' JSONB column."),(0,i.kt)("p",null,"To use this filter, you can pass a corresponding object to the where clause:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// Example: Filtering for users with specific settings\nwhere: {\n    settings: {\n        notifications: true,\n        theme: 'dark'\n    }\n}\n")),(0,i.kt)("p",null,"This query filters for users whose 'settings' JSONB column contains both the ",(0,i.kt)("inlineCode",{parentName:"p"},"notifications: true")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"theme: 'dark'")," key-value pairs. The equivalent SQL would be:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},'WHERE "settings"::jsonb @> \'{"notifications": true, "theme": "dark"}\'\n')),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"The addJsonContainsFilter is particularly efficient for straightforward checks of presence or absence of certain keys/values in a JSONB column."),(0,i.kt)("li",{parentName:"ul"},"This method is ideal for scenarios where you need to filter records based on a set of JSONB criteria without the need for more complex JSONB querying capabilities."))),(0,i.kt)("p",null,'Similarly to other filters, you can specify a 2nd "mapper" argument to specify a different field from the filter name, e.g.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"view.addJsonContainsFilter('settings', sql.fragment`users.user_settings`);\n")),(0,i.kt)("h2",{id:"generic-filters"},"Generic filters"),(0,i.kt)("p",null,"If you need more flexibility, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"addGenericFilter")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const userView = buildView`FROM users`\n    .addGenericFilter('ID', (value: string) => sql.fragment`users.id = ${value}`)\n")),(0,i.kt)("p",null,"This allows you to filter with the ",(0,i.kt)("inlineCode",{parentName:"p"},"where")," API like below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"where: {\n    ID: '123',\n}\n")),(0,i.kt)("p",null,"You can also declare more limited versions of the above filters, via ",(0,i.kt)("inlineCode",{parentName:"p"},"addGenericFilter"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const userView = buildView`FROM users`\n    .addGenericFilter('name_contains', (value: string) => sql.fragment`users.name ILIKE ${'%' + value + '%'}`)\n    .addGenericFilter('postsCount_gt', (value: number) => sql.fragment`(\n        SELECT COUNT(*) FROM posts\n        WHERE posts.author_id = users.id\n    ) > ${value}`)\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"The 2nd argument is an interpret function that accepts the value of that specific filter, the values of all the filters (",(0,i.kt)("inlineCode",{parentName:"p"},"where")," paramter), and the context (",(0,i.kt)("inlineCode",{parentName:"p"},"ctx")," parameter).\nIt should return a SQL fragment.")),(0,i.kt)("p",null,"If you want you can create your own helpers, for reusability:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"\nconst containsFilter = (name: SqlIdentifierToken) => (value: string) => sql.fragment`${name} ILIKE ${'%' + value + '%'}`\n\nconst userView = buildView`FROM users`\n    .addGenericFilter('name_contains', containsFilter(sql.identifier`users.name`))\n    .addGenericFilter('profession_contains', containsFilter(sql.identifier`users.profession`))\n")),(0,i.kt)("h2",{id:"merging-filters"},"Merging filters"),(0,i.kt)("p",null,"A good method of organizing filters is to declare them with basic views, for each table, and then reuse them as necessary for more complex views."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const postView = buildView`FROM posts`\n    .addStringFilter(['posts.title', 'posts.content'])\n    .addBooleanFilter('longPost', sql.fragment`LENGTH(posts.content) > 500`)\nconst userView = buildView`FROM users`\n    .addStringFilter(['users.first_name', 'users.last_name'])\n    .addBooleanFilter('isGmail', sql.fragment`users.email ILIKE '%gmail.com'`)\n")),(0,i.kt)("p",null,"If we have a view that joins the ",(0,i.kt)("inlineCode",{parentName:"p"},"posts")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"users")," tables, we can reuse the filters from the ",(0,i.kt)("inlineCode",{parentName:"p"},"postView")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"userView"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const combinedView = buildView`FROM posts\n    LEFT JOIN users ON users.id = posts.author_id`\n    .addFilters(postView.getFilters({\n      table: 'posts'\n    }))\n    .addFilters(userView.getFilters({\n      table: 'users'\n    }))\n")),(0,i.kt)("p",null,"Now you'll be able to filter by ",(0,i.kt)("inlineCode",{parentName:"p"},"posts.title"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"posts.content"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"posts.longPost"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"users.first_name"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"users.last_name"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"users.isGmail")," in the combined view."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'where: {\n    OR: [{\n        "posts.title": {\n            _ilike: \'John%\',\n        },\n    }, {\n        "users.isGmail": false,\n    }]\n}\n')),(0,i.kt)("p",null,"Note that ",(0,i.kt)("inlineCode",{parentName:"p"},"isGmail")," is automatically prefixed with ",(0,i.kt)("inlineCode",{parentName:"p"},"users"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"longPost")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"posts"),"."),(0,i.kt)("p",null,"This will produce an SQL query like the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *\nFROM posts\nLEFT JOIN users ON users.id = posts.author_id\nWHERE (\"posts\".\"title\" ILIKE 'John%' OR NOT(users.email ILIKE '%gmail.com'))\n")),(0,i.kt)("h2",{id:"usage-with-trpc"},"Usage with tRPC"),(0,i.kt)("p",null,"It is recommended to disable OR filters, because they can be computationally expensive.\nWhen calling the getLoadArgs function, specify the disabled filters:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"getPosts: publicProcedure\n    .input(postsLoader.getLoadArgs({\n        disabledFilters: {\n            OR: true,\n        }\n    }))\n    .query(({ input, ctx }) => {\n        return postsLoader.loadPagination({\n            ...input,\n            ctx,\n        });\n    }),\n")))}d.isMDXComponent=!0}}]);