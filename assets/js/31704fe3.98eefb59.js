"use strict";(self.webpackChunkslonik_trpc_docs=self.webpackChunkslonik_trpc_docs||[]).push([[177],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),f=a,g=d["".concat(s,".").concat(f)]||d[f]||p[f]||i;return n?r.createElement(g,o(o({ref:t},c),{},{components:n})):r.createElement(g,o({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},437:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:11},o="Virtual fields",l={unversionedId:"tutorial-getting-started/virtual-columns",id:"tutorial-getting-started/virtual-columns",title:"Virtual fields",description:"Declare any fields you want to process in typescript as virtual fields.",source:"@site/docs/tutorial-getting-started/virtual-columns.md",sourceDirName:"tutorial-getting-started",slug:"/tutorial-getting-started/virtual-columns",permalink:"/docs/tutorial-getting-started/virtual-columns",draft:!1,editUrl:"https://github.com/ardsh/slonik-trpc/tree/main/docs/docs/tutorial-getting-started/virtual-columns.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11},sidebar:"tutorialSidebar",previous:{title:"Overfetching",permalink:"/docs/tutorial-getting-started/overfetching"},next:{title:"Sorting",permalink:"/docs/tutorial-getting-started/sorting"}},s={},u=[{value:"Using ctx when resolving",id:"using-ctx-when-resolving",level:3}],c={toc:u};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"virtual-fields"},"Virtual fields"),(0,a.kt)("p",null,"Declare any fields you want to process in typescript as virtual fields."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const virtualFieldsLoader = makeQueryLoader({\n    query,\n    virtualFields: {\n        fullName: {\n            dependencies: ["first_name", "last_name"],\n            async resolve(row) {\n                // async code supported\n                return Promise.resolve(row.first_name + row.last_name);\n            },\n        },\n    }\n});\n')),(0,a.kt)("p",null,"The virtual fields can then be selected exactly like normal fields. Their return type will be inferred if possible."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const data = await virtualFieldsLoader.load({\n    select: ["id", "fullName"]\n}));\n')),(0,a.kt)("admonition",{type:"danger"},(0,a.kt)("p",{parentName:"admonition"},"Virtual fields are only supported when using ",(0,a.kt)("inlineCode",{parentName:"p"},"load"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"loadPagination")," currently.\nIf you're loading results manually using getQuery you won't get the virtual fields.")),(0,a.kt)("h3",{id:"using-ctx-when-resolving"},"Using ctx when resolving"),(0,a.kt)("p",null,"The context is passed as the 2nd argument to each virtual field resolver.\nThis can be used to return a field based on the context, e.g."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const virtualFieldsLoader = makeQueryLoader({\n    query,\n    virtualFields: {\n        content: {\n            dependencies: ["content"],\n            async resolve(row, ctx) {\n                if (!ctx.isLoggedIn) {\n                    // Return null if user isn\'t logged in.\n                    return null;\n                }\n                return row.content;\n            },\n        },\n    }\n});\n')),(0,a.kt)("admonition",{title:"Overriding",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"A virtual field can override a real field by using the same name.")))}d.isMDXComponent=!0}}]);